name: Build, Deploy and Test Petclinic on Minikube

on:
  push:
    branches: [main]
    paths:
      - 'k8s/**'
      - 'src/**'
  workflow_dispatch:

jobs:
  # Job 1: Build the Java application just once and store the JAR as an artifact.
  build_java_app:
    name: Build Java Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Build with Maven Wrapper
        # We use the 'package' goal to ensure the JAR file is created.
        run: ./mvnw -B package -DskipTests

      - name: Upload JAR artifact
        # This makes the JAR file available to other jobs.
        uses: actions/upload-artifact@v4
        with:
          name: petclinic-jar
          path: target/*.jar

  # Job 2: Build the Docker image, deploy to Minikube, and test.
  deploy_and_test:
    name: Deploy and Test on Minikube
    runs-on: ubuntu-latest
    needs: build_java_app # This job will only run after the build job succeeds.
    permissions:
      contents: write   # Required to commit changes back to the repo.
      packages: write   # Required to push Docker images to GHCR.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download JAR artifact
        # Download the JAR from the previous job into the build context.
        uses: actions/download-artifact@v4
        with:
          name: petclinic-jar
          path: target/

      - name: Set up Minikube
        # Pinning to a major version is safer than using @latest.
        uses: medyagh/setup-minikube@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build_image
        uses: docker/build-push-action@v5
        with:
          context: . # Assumes your Dockerfile copies the JAR from target/
          push: true
          tags: ghcr.io/${{ github.repository }}/spring-petclinic:${{ github.sha }}

      - name: Install yq for manifest editing
        # This method is faster than using 'snap install'.
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Update Kubernetes manifest image
        # Using the immutable image digest is a best practice for deployments.
        run: yq e -i '.spec.template.spec.containers[0].image = "${{ steps.build_image.outputs.digest }}"' k8s/petclinic.yml

      - name: Commit and push manifest update
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add k8s/petclinic.yml
          # CRITICAL: Add [skip ci] to the commit message to prevent an infinite loop.
          git commit -m "chore: update petclinic image to ${{ steps.build_image.outputs.digest }} [skip ci]" || echo "No changes to commit"
          git push

      - name: Deploy to Minikube and Wait
        run: |
          # Step 1: Deploy the database first.
          echo ">>> Deploying MySQL database..."
          kubectl apply -f k8s/db_mysql.yml
          echo ">>> Waiting for MySQL database to be ready..."
          kubectl wait --for=condition=ready pod -l app=demo-db --timeout=180s

          # Step 2: Only after the DB is ready, deploy the application.
          echo ">>> Deploying Petclinic application..."
          kubectl apply -f k8s/petclinic.yml
          echo ">>> Waiting for Petclinic application to be ready..."
          kubectl wait --for=condition=ready pod -l app=petclinic --timeout=180s

          echo "Deployment successful!"